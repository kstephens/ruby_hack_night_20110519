#!/usr/bin/env ruby

######################################################################

def add_current_dir file_name
  file_name = "./#{file_name}" unless file_name =~ %r{/}
  file_name
end

######################################################################

filters = [ ]
since = nil

args = ARGV.dup
until args.empty?
  case arg = args.shift
  when /^--since/
    since = args.shift
  else
    filters << arg
  end
end

filters.map! do | f | 
  f = add_current_dir f
  f = %r{\A#{Regexp.escape(f)}} if f[-1, 1] == '/'
  f
end

######################################################################

counts = { }

cmd = "git log --pretty=format:'%h | %ad | %s | %d | %an' --date=short --name-only"

######################################################################

File.popen(cmd, "r") do | f |
  until f.eof? # commits loop:
    line = f.readline.chomp!
    v = { }
    commit_id, v[:date], v[:comment], v[:branch_info], v[:user] = 
      line.split(' | ')

    files = [ ]
    until f.eof? # files in commit loop:
      line = f.readline.chomp!
      break if line.empty?
      file_name = line
      files << add_current_dir(file_name)
    end

    get_totals = true
    get_totals = v[:date] >= since if since
    if get_totals
      files.each do | file_name |
        if filters && !filters.empty?
          next unless filters.any? { | filter | filter === file_name }
        end

        v[:file] = file_name
        v[:directory] = File.dirname(file_name)

        v.each do | type, value |
          (c = counts[type] ||= { })[value] ||= 0
          c[value] += 1
        end
      end
    end
  end
end

######################################################################

def print_counts hash, title
  title_printed = false
  hash.keys.sort.each do | name |
    n = hash[name]

    unless title_printed
      puts "#{title}:" 
      title_printed = true
    end

    puts '%10d %s' % [ n, name ]
  end
end

types = [ :file, :directory, :date, :user, :comment, :branch_info ]
types.each do | type |
  print_counts counts[type], type
end

